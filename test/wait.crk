fun slowfirst(xs : (Int . Int)*) : Int* =
    case xs of
      nil => nil
    | y :: ys =>
        let (a;b) = y in
            wait b do
                a :: rec(ys)
            end

exec slowfirst(xs = emp)
exec slowfirst(xs = [(3;4);(4;emp)])

fun addone(xs : Int*) : Int* =
    case xs of
      nil => nil
    | y :: ys => wait y do
                  {y + 1} :: rec(ys)
                 end

exec addone(xs = emp)
exec addone(xs = [])
exec addone(xs = [1;2;3;4;5;emp])

fun runningsum(z : Int; xs : Int*) : Int* =
    case xs of
      nil => z :: nil
    | y :: ys => wait y, z do
                    {y + z} :: rec({y + z};ys)
                 end

exec runningsum(z = 0;xs = [1;2;3;4;emp])

