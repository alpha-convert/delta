fun f(x : Int) : Int = x

fun g(x : Int) : Int =
    f(x)

exec g(x = 3)

fun addOne(x : Int) : Int = wait x do {x + 1} end

fun addTwo(x : Int) : Int =
    addOne(addOne(x))

fun addOneToAll(xs : Int*) : Int* =
    case xs of
      nil => nil
    | y::ys => addOne(y) :: addOneToAll(ys)

fun filter[s,t](xs : (s + t)*) : s* =
    case xs of
      nil => nil
    | y :: ys => case y of
                   inl u => u::filter(ys)
                 | inr _ => filter(ys)

fun spec(xs : (Int + Bool)*) : Int* =
    filter[Int,Bool](xs)
