fun tumble(k : Int ; n : Int ; xs : Int*) : Int* . Int** =
    case xs of
      nil => (nil;nil)
    | y::ys => wait k,n do
                 if {n + 1 >= k} then
                    let (cur;rest) = rec({k};0;ys) in (y :: nil;cur :: rest)
                 else 
                    let (cur;rest) = rec({k};{n + 1};ys) in (y::cur;rest)
               end

exec tumble(k=2;n=0;xs=emp)
exec tumble(k=2;n=0;xs=[emp))
exec tumble(k=2;n=0;xs=[3))
exec tumble(k=2;n=0;xs=[3;emp))
exec tumble(k=2;n=0;xs=[3;4))
exec tumble(k=2;n=0;xs=[3;4;emp))
exec tumble(k=2;n=0;xs=[3;4;5))
exec tumble(k=2;n=0;xs=[3;4;5;6))
exec tumble(k=2;n=0;xs=[3;4;5;6;7))
exec tumble(k=2;n=0;xs=[3;4;5;6;7])