fun length(xs : Int*) : Int =
    case xs of
      nil => 0
    | _ :: ys => let n = length(ys) in
                 wait n do
                    {1 + n}
                 end

fun sumGo(acc : Int; xs : Int*) : Int =
    case xs of
      nil => acc
    | x :: xs => wait x, acc do
                    sumGo({x + acc}; xs)
                 end

fun sum(xs : Int*) : Int = sumGo(0;xs)

fun averageRun(w : Int . Int*) : Int =
  let (x;xs) = w in
  let (k,n) = (sum(xs), length(xs)) in
  wait x,k,n do
    {(k + x) / (n + 1)}
  end

fun averageRuns(xs : (Int . Int*)*) : Int* =
  case xs of
    nil => nil
  | y::ys => averageRun(y)::averageRuns(ys)


fun takeWhileGeq(t : Int;xs : Int*) : Int* . Int* =
  case xs of
    nil => (nil;nil)
  | y :: ys => wait y,t do
                if {y > t} then
                  let (zs;rest) = takeWhileGeq({t};ys) in
                  ({y}::zs;rest)
                else
                  (nil;{y}::ys)
               end
               

fun parseLL(t : Int; xs : Int*) : (Int . Int*)* =
  case xs of
    nil => nil
  | y :: ys => wait y,t do
                 if {y > t} then
                   let (run;rest) = takeWhileGeq({t};ys) in
                   ({y};run) :: parseLL({t};rest)
                 else
                   parseLL({t};ys)
               end


fun threshAverage(t : Int; xs : Int*) : Int* =
  averageRuns(parseLL(t;xs))

specialize parseLL[]
specialize averageRuns[]
specialize threshAverage[]

exec parseLL(t = 3; xs = [1;2;3;4;5;0))

exec averageRuns(xs = [(3;[4;5]);emp))

exec threshAverage(t = 3; xs = [1;2;3;4;5;0))